{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#license-pre-validation-service-lpvs","title":"License Pre-Validation Service (LPVS)","text":""},{"location":"#introduction","title":"Introduction","text":"<p>Open-source code (that is a software that is freely available for use, study, modification, and distribution) must meet conditions of the respective license(s) of all of its dependencies. Miscompliance may lead to legal disputes, fines, obligation to disclose intellectual property, as well as reputational damage.</p> <p>In projects with numerous external dependencies, it becomes challenging to track license obligations accurately. Also, when many collaborators are involved, the risk of unintentional license violations, such as through copy-pasting code snippets, increases. Furthermore, there are nuanced situations like dependencies with dual licensing or licenses that may change due to ownership, purpose, or legislative alterations. These factors can potentially turn previously safe dependencies into unsafe ones over time.</p> <p>To address these license-related risks for open-source code, we have developed the License Pre-Validation Service (LPVS). This tool provides a solution to mitigate potential license issues. By analyzing the project, LPVS identifies its components and their respective licenses at every commit. Then it generates a list of potential issue cases, and communicates them to the developers as comments on GitHub. LPVS offers a comprehensive description of possible license violations, including the details on the location of risky code and an overview of the specific license-related issues.</p> <p>With LPVS, we aim at assisting developers and project teams with ensuring license compliance for their open-source code. By providing insights into the potential license violations and their implications, LPVS enables proactive management of license-related risks throughout the development process.</p> <p>We believe that LPVS will be an invaluable tool for maintaining the integrity of open-source projects and safeguarding against license infringements.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>License Scanners:</li> </ul> <p>LPVS integrates with the SCANOSS license scanner, allowing for comprehensive license analysis of the project's components. SCANOSS helps to identify the licenses associated with the codebase, ensuring the compliance with open-source license requirements. By leveraging SCANOSS, LPVS provides accurate and up-to-date information on the licenses used in the project.</p> <ul> <li>GitHub Review System Integration:</li> </ul> <p>LPVS seamlessly integrates with the GitHub review system, enhancing the collaboration and code review process. LPVS automatically generates comments on GitHub, highlighting potential license violations or issues within the codebase. This integration streamlines the review process, making it easier for the developers and collaborators to identify and address license-related concerns directly within the GitHub environment.</p> <ul> <li>Continuous Monitoring:</li> </ul> <p>LPVS facilitates continuous monitoring of license-related risks throughout the development process. By analyzing each commit, LPVS ensures that any changes or additions to the codebase are assessed for potential license violations. This ongoing monitoring allows developers to proactively manage license compliance and address any issues that arise in a timely manner.</p> <ul> <li>Risk Mitigation:</li> </ul> <p>LPVS aims at mitigating license-related risks by providing early detection and identification of potential violations. By alerting developers about potential issues and by providing the necessary information to understand and address them, LPVS empowers teams to take proactive steps to ensure compliance with open-source licenses. This helps mitigate the risk of legal disputes, financial liabilities, and reputational damage associated with license violations.</p> <p>With these features, LPVS assists developers to manage license compliance for their open-source projects effectively. By integration with license scanning tools, supporting the GitHub review system, and providing comprehensive issue descriptions, LPVS offers a robust solution for identifying and addressing license-related risks in the software development lifecycle.</p>"},{"location":"about/license/","title":"License","text":"<p>The legal stuff.</p>"},{"location":"about/license/#lpvs-license-mit","title":"LPVS License (MIT)","text":"<p>Copyright (c) 2022, Samsung Electronics Co., Ltd. All rights reserved.</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/releases/","title":"Releases","text":"<p>Where to get the latest released version of LPVS.</p>"},{"location":"about/releases/#used-version","title":"Used version","text":"<p>You can determine your currently used version of LPVS by running the next command in console and checking the logs:</p> <p><pre><code>$ java -jar lpvs-x.y.z.jar\n</code></pre> </p>"},{"location":"about/releases/#latest-releases","title":"Latest releases","text":"<p>Actual releases with release notes are available on GitHub.</p>"},{"location":"about/releases/#maintenance-team","title":"Maintenance team","text":"<p>The current and past members of the LPVS team.</p> <ul> <li>@MoonkiHong</li> <li>@tiokim</li> <li>@o-kopysov</li> <li>@tdrozdovsky</li> <li>@m-rudyk</li> <li>@v-kerimov</li> <li>@o-konoval</li> <li>@t-naumenko</li> </ul>"},{"location":"dev-guide/","title":"Developer Guide","text":"<p>Extending LPVS</p> <p>The LPVS Developer Guide provides documentation for developers and contributors. You can jump directly to the pages listed below, or use the next and previous buttons  in the navigation bar at the top of the page to move through the documentation in order.</p> <ul> <li>Contributing guide</li> <li>Testing policy</li> <li>Code review requirements</li> <li>API reference</li> <li>Integration guide</li> </ul>"},{"location":"dev-guide/api/","title":"API reference","text":"<p>Automatically generated from LPVS OpenAPI v3.0.0</p>"},{"location":"dev-guide/api/#lpvs-api-v2-20231228","title":"LPVS API v2-20231228","text":"<p>License Pre-Validation Service (LPVS) is a tool designed to proactively manage license-related risks in Open Source code. It conducts in-depth analysis of your project, meticulously identifying components and their associated licenses with every commit. LPVS empowers your development workflow by ensuring compliance and providing insights into licensing aspects, enhancing the overall health and robustness of your software projects.</p> Contact: Oleg Kopysov o.kopysov@samsung.com License: MIT"},{"location":"dev-guide/api/#github-webhooks-api","title":"GitHub Webhooks API","text":""},{"location":"dev-guide/api/#post-webhooks","title":"POST /webhooks","text":"<p>Start Scan</p> Description <p>Endpoint for handling GitHub webhook events and processing the payload.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>X-Hub-Signature-256</code> header string No <p>Request body</p> application/json <p><pre><code>{\n    \"action\": \"opened\",\n    \"repository\": {\n        \"name\": \"LPVS\",\n        \"full_name\": \"Samsung/LPVS\",\n        \"html_url\": \"https://github.com/Samsung/LPVS\"\n    },\n    \"pull_request\": {\n        \"html_url\": \"https://github.com/Samsung/LPVS/pull/18\",\n        \"head\": {\n            \"repo\": {\n                \"fork\": \"true\",\n                \"html_url\": \"https://github.com/Samsung/LPVS/tree/utests\"\n            },\n            \"sha\": \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\",\n            \"ref\": \"Samsung:utests\"\n        },\n        \"url\": \"https://api.github.com/repos/Samsung/LPVS/pulls/18\"\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"action\": {\n            \"type\": \"string\",\n            \"example\": \"opened\"\n        },\n        \"repository\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"name\": {\n                    \"type\": \"string\",\n                    \"example\": \"LPVS\"\n                },\n                \"full_name\": {\n                    \"type\": \"string\",\n                    \"example\": \"Samsung/LPVS\"\n                },\n                \"html_url\": {\n                    \"type\": \"string\",\n                    \"format\": \"uri\",\n                    \"example\": \"https://github.com/Samsung/LPVS\"\n                }\n            }\n        },\n        \"pull_request\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"html_url\": {\n                    \"type\": \"string\",\n                    \"format\": \"uri\",\n                    \"example\": \"https://github.com/Samsung/LPVS/pull/18\"\n                },\n                \"head\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"repo\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"fork\": {\n                                    \"type\": \"string\",\n                                    \"example\": \"true\"\n                                },\n                                \"html_url\": {\n                                    \"type\": \"string\",\n                                    \"format\": \"uri\",\n                                    \"example\": \"https://github.com/Samsung/LPVS/tree/utests\"\n                                }\n                            }\n                        },\n                        \"sha\": {\n                            \"type\": \"string\",\n                            \"example\": \"edde69ecb8e8a88dde09fa9789e2c9cab7cf7cf9\"\n                        },\n                        \"ref\": {\n                            \"type\": \"string\",\n                            \"example\": \"Samsung:utests\"\n                        }\n                    }\n                },\n                \"url\": {\n                    \"type\": \"string\",\n                    \"format\": \"uri\",\n                    \"example\": \"https://api.github.com/repos/Samsung/LPVS/pulls/18\"\n                }\n            }\n        }\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"message\": \"Success\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"example\": \"Success\"\n        }\n    }\n}\n</code></pre> <p> Response 403 Forbidden </p> application/json <p><pre><code>{\n    \"message\": \"Error\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"example\": \"Error\"\n        }\n    }\n}\n</code></pre>"},{"location":"dev-guide/api/#github-pull-request-single-scan-api","title":"GitHub Pull Request Single Scan API","text":""},{"location":"dev-guide/api/#post-scangithuborggithubrepoprnumber","title":"POST /scan/{gitHubOrg}/{gitHubRepo}/{prNumber}","text":"<p>GitHub Pull Request Single Scan</p> Description <p>Endpoint for performing a single scan operation based on GitHub organization, repository, and pull request number.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>gitHubOrg</code> path string No GitHub organization name <code>gitHubRepo</code> path string No GitHub repository name <code>prNumber</code> path integer No Pull request number <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"message\": \"Success\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"example\": \"Success\"\n        }\n    }\n}\n</code></pre> <p> Response 403 Forbidden </p> application/json <p><pre><code>{\n    \"message\": \"Error\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"message\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\",\n            \"example\": \"Error\"\n        }\n    }\n}\n</code></pre>"},{"location":"dev-guide/api/#web-api","title":"Web API","text":""},{"location":"dev-guide/api/#get-apiv1webuserlogin","title":"GET /api/v1/web/user/login","text":"<p>User Login</p> Description <p>Retrieves login details for the authenticated user.</p> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"isLoggedIn\": true,\n    \"member\": {\n        \"id\": 1,\n        \"name\": \"John Doe\",\n        \"email\": \"john.doe@example.com\",\n        \"provider\": \"GitHub\",\n        \"nickname\": \"johndoe\",\n        \"organization\": \"Acme Corp\"\n    }\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"isLoggedIn\": {\n            \"type\": \"boolean\",\n            \"description\": \"Indicates whether the member is logged in or not\",\n            \"example\": true\n        },\n        \"member\": {\n            \"$ref\": \"#/components/schemas/LPVSMember\"\n        }\n    }\n}\n</code></pre> <p> Response 401 Unauthorized </p> <p> Response 500 Internal Server Error </p>"},{"location":"dev-guide/api/#get-apiv1webuserinfo","title":"GET /api/v1/web/user/info","text":"<p>Retrieve User Information</p> Description <p>Retrieves personal information settings for the authenticated user.</p> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"provider\": \"GitHub\",\n    \"nickname\": \"johndoe\",\n    \"organization\": \"Acme Corp\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"description\": \"The unique identifier of the member\",\n            \"example\": 1\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the member\",\n            \"example\": \"John Doe\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"format\": \"email\",\n            \"description\": \"The email address of the member\",\n            \"example\": \"john.doe@example.com\"\n        },\n        \"provider\": {\n            \"type\": \"string\",\n            \"description\": \"The provider associated with the member\",\n            \"example\": \"GitHub\"\n        },\n        \"nickname\": {\n            \"type\": \"string\",\n            \"description\": \"The nickname of the member\",\n            \"example\": \"johndoe\"\n        },\n        \"organization\": {\n            \"type\": \"string\",\n            \"description\": \"The organization associated with the member\",\n            \"example\": \"Acme Corp\"\n        }\n    }\n}\n</code></pre> <p> Response 401 Unauthorized </p> <p> Response 500 Internal Server Error </p>"},{"location":"dev-guide/api/#post-apiv1webuserupdate","title":"POST /api/v1/web/user/update","text":"<p>Update User Settings</p> Description <p>Updates user settings based on the provided data in the request body.</p> <p>Request body</p> application/json <p><pre><code>{\n    \"nickname\": \"string\",\n    \"organization\": \"string\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"nickname\": {\n            \"type\": \"string\",\n            \"description\": \"User's new nickname\"\n        },\n        \"organization\": {\n            \"type\": \"string\",\n            \"description\": \"User's new organization\"\n        }\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"id\": 1,\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\",\n    \"provider\": \"GitHub\",\n    \"nickname\": \"johndoe\",\n    \"organization\": \"Acme Corp\"\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"id\": {\n            \"type\": \"integer\",\n            \"description\": \"The unique identifier of the member\",\n            \"example\": 1\n        },\n        \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the member\",\n            \"example\": \"John Doe\"\n        },\n        \"email\": {\n            \"type\": \"string\",\n            \"format\": \"email\",\n            \"description\": \"The email address of the member\",\n            \"example\": \"john.doe@example.com\"\n        },\n        \"provider\": {\n            \"type\": \"string\",\n            \"description\": \"The provider associated with the member\",\n            \"example\": \"GitHub\"\n        },\n        \"nickname\": {\n            \"type\": \"string\",\n            \"description\": \"The nickname of the member\",\n            \"example\": \"johndoe\"\n        },\n        \"organization\": {\n            \"type\": \"string\",\n            \"description\": \"The organization associated with the member\",\n            \"example\": \"Acme Corp\"\n        }\n    }\n}\n</code></pre> <p> Response 401 Unauthorized </p> <p> Response 500 Internal Server Error </p>"},{"location":"dev-guide/api/#get-apiv1webhistorytypename","title":"GET /api/v1/web/history/{type}/{name}","text":"<p>Retrieve History Page Entity</p> Description <p>Retrieves the history page entity based on the specified type and name.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>name</code> path string No The name of the user or organization. <code>pageable</code> query None No The pageable object for pagination. <code>type</code> path string No The type of history (e.g., \"own\", \"org\", \"send\"). <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"lpvsHistories\": [\n        {\n            \"scanDate\": \"2023-01-01\",\n            \"repositoryName\": \"example-repo\",\n            \"pullRequestId\": 123,\n            \"url\": \"https://example.com/pull/123\",\n            \"status\": \"pending\",\n            \"sender\": \"JohnDoe\",\n            \"pullNumber\": \"pull/123\",\n            \"hasIssue\": true\n        }\n    ],\n    \"count\": 10\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"lpvsHistories\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/LPVSHistory\"\n            },\n            \"description\": \"List of LPVSHistory entries\"\n        },\n        \"count\": {\n            \"type\": \"integer\",\n            \"description\": \"The count of history entries\",\n            \"example\": 10\n        }\n    }\n}\n</code></pre> <p> Response 401 Unauthorized </p> <p> Response 500 Internal Server Error </p>"},{"location":"dev-guide/api/#get-apiv1webresultprid","title":"GET /api/v1/web/result/{prId}","text":"<p>Retrieve LPVSResult for Pull Request</p> Description <p>Retrieves the LPVSResult for a specific pull request ID.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>pageable</code> query None No The pageable object for pagination. <code>prId</code> path number No The pull request ID. <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"lpvsResultFileList\": [\n        {\n            \"id\": 1,\n            \"path\": \"src/main/java/Example.java\",\n            \"componentFileUrl\": \"https://example.com/file/1\",\n            \"matchLine\": \"42\",\n            \"matchValue\": \"Snippet\",\n            \"status\": \"license.PERMITTED\",\n            \"licenseSpdx\": \"MIT\"\n        }\n    ],\n    \"lpvsResultInfo\": {\n        \"id\": 1,\n        \"scanDate\": \"2023-01-01T12:00:00Z\",\n        \"repositoryName\": \"example-repo\",\n        \"status\": \"pending\",\n        \"detectedLicenses\": [\n            \"string\"\n        ]\n    },\n    \"count\": 10,\n    \"licenseCountMap\": {\n        \"MIT\": 3,\n        \"Apache-2.0\": 2\n    },\n    \"pullNumber\": \"pull/123\",\n    \"hasIssue\": true\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"lpvsResultFileList\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/LPVSResultFile\"\n            },\n            \"description\": \"List of LPVSResultFile entries\"\n        },\n        \"lpvsResultInfo\": {\n            \"$ref\": \"#/components/schemas/LPVSResultInfo\"\n        },\n        \"count\": {\n            \"type\": \"integer\",\n            \"description\": \"The count of results\",\n            \"example\": 10\n        },\n        \"licenseCountMap\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"type\": \"integer\"\n            },\n            \"description\": \"Map of license counts\",\n            \"example\": {\n                \"MIT\": 3,\n                \"Apache-2.0\": 2\n            }\n        },\n        \"pullNumber\": {\n            \"type\": \"string\",\n            \"description\": \"The pull request number\",\n            \"example\": \"pull/123\"\n        },\n        \"hasIssue\": {\n            \"type\": \"boolean\",\n            \"description\": \"Indicates whether the result has an issue or not\",\n            \"example\": true\n        }\n    }\n}\n</code></pre> <p> Response 401 Unauthorized </p> <p> Response 500 Internal Server Error </p>"},{"location":"dev-guide/api/#get-apiv1webdashboardtypename","title":"GET /api/v1/web/dashboard/{type}/{name}","text":"<p>Retrieve Dashboard Entity</p> Description <p>Retrieves the Dashboard entity based on the specified type and name.</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>name</code> path string No The name of the user or organization. <code>type</code> path string No The type of the dashboard (e.g., user, organization). <p> Response 200 OK </p> application/json <p><pre><code>{\n    \"name\": \"john-doe\",\n    \"licenseCountMap\": {\n        \"MIT\": 3,\n        \"Apache-2.0\": 2\n    },\n    \"totalDetectionCount\": 100,\n    \"highSimilarityCount\": 20,\n    \"totalIssueCount\": 5,\n    \"totalParticipantsCount\": 50,\n    \"totalRepositoryCount\": 10,\n    \"dashboardElementsByDates\": [\n        {\n            \"date\": \"2023-01-01\",\n            \"participantCount\": 5,\n            \"pullRequestCount\": 10,\n            \"riskGradeMap\": {\n                \"SERIOUS\": 2,\n                \"HIGH\": 3,\n                \"MIDDLE\": 5,\n                \"LOW\": 8,\n                \"NONE\": 2\n            }\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the response body <pre><code>{\n    \"type\": \"object\",\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"description\": \"The name of the user or organization\",\n            \"example\": \"john-doe\"\n        },\n        \"licenseCountMap\": {\n            \"type\": \"object\",\n            \"additionalProperties\": {\n                \"type\": \"integer\"\n            },\n            \"description\": \"Map of license counts\",\n            \"example\": {\n                \"MIT\": 3,\n                \"Apache-2.0\": 2\n            }\n        },\n        \"totalDetectionCount\": {\n            \"type\": \"integer\",\n            \"description\": \"The total number of detections\",\n            \"example\": 100\n        },\n        \"highSimilarityCount\": {\n            \"type\": \"integer\",\n            \"description\": \"The count of high similarity detections\",\n            \"example\": 20\n        },\n        \"totalIssueCount\": {\n            \"type\": \"integer\",\n            \"description\": \"The total number of issues\",\n            \"example\": 5\n        },\n        \"totalParticipantsCount\": {\n            \"type\": \"integer\",\n            \"description\": \"The total number of participants\",\n            \"example\": 50\n        },\n        \"totalRepositoryCount\": {\n            \"type\": \"integer\",\n            \"description\": \"The total number of repositories\",\n            \"example\": 10\n        },\n        \"dashboardElementsByDates\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"$ref\": \"#/components/schemas/DashboardElementsByDate\"\n            },\n            \"description\": \"List of DashboardElementsByDate entries\"\n        }\n    }\n}\n</code></pre> <p> Response 401 Unauthorized </p> <p> Response 500 Internal Server Error </p>"},{"location":"dev-guide/api/#schemas","title":"Schemas","text":""},{"location":"dev-guide/api/#dashboard","title":"Dashboard","text":"Name Type <code>dashboardElementsByDates</code> Array&lt;DashboardElementsByDate&gt; <code>highSimilarityCount</code> integer <code>licenseCountMap</code> Example: <code>{'MIT': 3, 'Apache-2.0': 2}</code> <code>name</code> string <code>totalDetectionCount</code> integer <code>totalIssueCount</code> integer <code>totalParticipantsCount</code> integer <code>totalRepositoryCount</code> integer"},{"location":"dev-guide/api/#dashboardelementsbydate","title":"DashboardElementsByDate","text":"Name Type <code>date</code> string(date) <code>participantCount</code> integer <code>pullRequestCount</code> integer <code>riskGradeMap</code> Example: <code>{'SERIOUS': 2, 'HIGH': 3, 'MIDDLE': 5, 'LOW': 8, 'NONE': 2}</code>"},{"location":"dev-guide/api/#historyentity","title":"HistoryEntity","text":"Name Type <code>count</code> integer <code>lpvsHistories</code> Array&lt;LPVSHistory&gt;"},{"location":"dev-guide/api/#lpvshistory","title":"LPVSHistory","text":"Name Type <code>hasIssue</code> boolean <code>pullNumber</code> string <code>pullRequestId</code> integer <code>repositoryName</code> string <code>scanDate</code> string <code>sender</code> string <code>status</code> string <code>url</code> string(uri)"},{"location":"dev-guide/api/#lpvsloginmember","title":"LPVSLoginMember","text":"Name Type <code>isLoggedIn</code> boolean <code>member</code> LPVSMember"},{"location":"dev-guide/api/#lpvsmember","title":"LPVSMember","text":"Name Type <code>email</code> string(email) <code>id</code> integer <code>name</code> string <code>nickname</code> string <code>organization</code> string <code>provider</code> string"},{"location":"dev-guide/api/#lpvsresult","title":"LPVSResult","text":"Name Type <code>count</code> integer <code>hasIssue</code> boolean <code>licenseCountMap</code> Example: <code>{'MIT': 3, 'Apache-2.0': 2}</code> <code>lpvsResultFileList</code> Array&lt;LPVSResultFile&gt; <code>lpvsResultInfo</code> LPVSResultInfo <code>pullNumber</code> string"},{"location":"dev-guide/api/#lpvsresultfile","title":"LPVSResultFile","text":"Name Type <code>componentFileUrl</code> string(uri) <code>id</code> integer <code>licenseSpdx</code> string <code>matchLine</code> string <code>matchValue</code> string <code>path</code> string <code>status</code> string"},{"location":"dev-guide/api/#lpvsresultinfo","title":"LPVSResultInfo","text":"Name Type <code>detectedLicenses</code> Array&lt;string&gt; <code>id</code> integer <code>repositoryName</code> string <code>scanDate</code> string(date-time) <code>status</code> string"},{"location":"dev-guide/api/#pageable","title":"Pageable","text":"Name Type <code>direction</code> string <code>page</code> integer <code>size</code> integer <code>sort</code> string"},{"location":"dev-guide/api/#userupdaterequest","title":"UserUpdateRequest","text":"Name Type <code>nickname</code> string <code>organization</code> string"},{"location":"dev-guide/api/#webhookrequest","title":"WebhookRequest","text":"Name Type <code>action</code> string <code>pull_request</code> Properties: <code>html_url, head, url</code> <code>repository</code> Properties: <code>name, full_name, html_url</code>"},{"location":"dev-guide/api/#webhookresponseforbidden","title":"WebhookResponseForbidden","text":"Name Type <code>message</code> string(uuid)"},{"location":"dev-guide/api/#webhookresponseok","title":"WebhookResponseOK","text":"Name Type <code>message</code> string(uuid)"},{"location":"dev-guide/code-review-requirements/","title":"Code review requirements","text":"<p>How to conduct code reviews in the LPVS project.</p>"},{"location":"dev-guide/code-review-requirements/#introduction","title":"Introduction","text":"<p>Code review is a process in which one or more developers are systematically tasked with reviewing  the code written by another developer in order to find defects and improve it. Code review should  be done by project maintainers considering code quality and safety, sharing best practices and this  leads to better collaboration, creating a culture of review, building team confidence in the code.</p>"},{"location":"dev-guide/code-review-requirements/#code-review-process","title":"Code Review Process","text":"<p>Initiating a Code Review</p> <ul> <li>All code changes must undergo a review before merging into the main branch.</li> <li>The developer initiates a code review by creating a pull request.</li> </ul> <p>Assigning Reviewers</p> <ul> <li>The pull request is automatically assigned to maintainers for review.</li> <li>Other team members should be added manually for review.</li> </ul> <p>Reviewing Code</p> <ul> <li>Reviewers are responsible for thoroughly examining the code changes.</li> <li>Check for adherence to coding standards, best practices, and project guidelines.</li> </ul> <p>Providing Constructive Feedback</p> <ul> <li>Reviewers must provide clear and constructive feedback on identified issues or improvements.</li> <li>Discussions within the pull request are encouraged to ensure a shared understanding.</li> </ul>"},{"location":"dev-guide/code-review-requirements/#requirements","title":"Requirements","text":"<ul> <li>Review fewer than 400 lines of code at a time.</li> <li>Take your time. Inspection rates should under 500 LOC per hour.</li> <li>Do not review for more than 60 minutes at a time.</li> <li>Set goals and capture metrics.</li> <li>Authors should annotate source code before the review.</li> <li>Use checklists.</li> <li>Establish a process for fixing defects found.</li> <li>Foster a positive code review culture.</li> <li>Embrace the subconscious implications of peer review.</li> <li>Practice lightweight code reviews.</li> <li>Code changes must receive approval from at least two team members before merging.</li> <li>At least one maintainer's approval is required.</li> <li>Critical issues raised during the review must be addressed before approval.</li> <li>Non-blocking feedback should be addressed in subsequent iterations.</li> <li>Pull requests should be kept focused on specific features or fixes.</li> <li>Continuous improvement in code quality is encouraged.</li> </ul>"},{"location":"dev-guide/code-review-requirements/#self-verification-checklist","title":"Self-verification Checklist","text":"<ul> <li> Coding Standards: ensure the code follows the established coding standards.</li> <li> Functionality: verify that the code changes address the intended functionality or issue.</li> <li> Edge Cases: check for handling of edge cases and potential error scenarios.</li> <li> Testing: confirm that appropriate tests have been added or updated.</li> <li> Documentation: validate that code changes are well-documented, including inline comments and README updates.</li> <li> Security: assess the code for potential security vulnerabilities.</li> </ul>"},{"location":"dev-guide/contributing/","title":"Contributing","text":"<p>An introduction to contributing to the LPVS project.</p> <p>We welcome contributions! By contributing, you can help improve this project and make it better for everyone.</p>"},{"location":"dev-guide/contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<p>Here are some ways you can contribute to this project:</p> <ul> <li>Report Bugs &amp; Request Features \ud83d\udc1b\ud83d\udca1: Let us know if you find any bugs or have ideas   for new features by creating an issue.</li> <li>Vulnerability Reporting \ud83d\udea8: If you discover a vulnerability in our project, please report it according to    the Security guideline.</li> <li>Code Contributions \ud83d\udee0\ufe0f: Fix bugs, add new features, or improve the existing code.</li> <li>Documentation \ud83d\udcdd: Improve our documentation by correcting typos, clarifying instructions,   or adding new content.</li> <li>Code Reviews \ud83d\udd0d: Review other contributors' pull requests to maintain code quality.</li> </ul>"},{"location":"dev-guide/contributing/#code-contribution","title":"Code Contribution","text":"<p>If you want to contribute to the LPVS project and make it better, your help is very welcome.  Contributing is also a great way to learn more about social coding on GitHub, new technologies,  and how to make constructive bug reports, feature requests, and the noblest of all contributions:  a good, clean pull request.</p> <p>Note</p> <p>You can use templates to create a description of your pull request or issue, which will greatly  simplify the LPVS team's work on reviewing and incorporating your code. However, using these  templates is not mandatory, and we will always welcome any help.</p> <p>To make a clean pull request, follow the steps below:</p> <ul> <li>Fork the LPVS repository on GitHub and clone your fork  to your development environment.</li> </ul> <pre><code>git clone https://github.com/YOUR-GITHUB-USERNAME/LPVS.git\n</code></pre> <p>Warning</p> <p>If you have trouble setting up Git with GitHub in Linux or are getting errors like <code>Permission    Denied (publickey)</code>, you must set up your Git installation to work with GitHub.</p> <ul> <li>Add the main LPVS repository as an additional Git remote called <code>upstream</code>.</li> </ul> <pre><code>git remote add upstream https://github.com/samsung/lpvs\n</code></pre> <ul> <li>Make sure there is an issue created for the task you are working on. All new features and bug  fixes should have an associated issue to provide a single point of reference for discussion and documentation.  If the issue already exists, leave a comment on that issue indicating that you intend to work on it.  If it doesn't exist, open a new issue for your task. </li> </ul> <p>Note</p> <p>For small changes or documentation issues, creating an issue is not necessary,    and a pull request is sufficient.</p> <ul> <li>Fetch the latest code from the main LPVS branch.</li> </ul> <pre><code>git fetch upstream\n</code></pre> <p>Warning</p> <p>You should start at this point for every new contribution to make sure you are working    on the latest code.</p> <ul> <li>Create a new branch for your feature based on the current LPVS main branch. Each separate bug fix  or feature addition should have its own branch. Branch names should be descriptive and start with  the number of the corresponding issue, if applicable. If you're not fixing a specific issue, you  can skip the number. </li> </ul> <pre><code>git checkout upstream/&lt;NAMED_RELEASE&gt;\ngit checkout -b 999-name-of-your-branch-goes-here\n</code></pre> <p>Info</p> <p>Above,  can be '1.0.0', etc. - see the list of releases or <code>main</code> branch. <ul> <li> <p>Write your code and make the necessary changes.</p> </li> <li> <p>Follow the coding conventions and style guidelines used in the LPVS project.</p> </li> <li>Write clear, concise, and well-documented code.</li> <li>Include unit tests to ensure the correctness of your code.</li> <li>If you're adding a new feature, consider updating the relevant documentation and examples.</li> <li> <p>If you're fixing a bug, provide a clear explanation of the issue and how your code resolves it.</p> </li> <li> <p>Commit your changes with a descriptive commit message. Make sure to mention the issue number  with <code>#XXX</code> so that GitHub will automatically link your commit with the issue. Additionally, use  appropriate commit message prefixes to categorize your changes.</p> <ul> <li>feat: Introduce a new feature or enhancement.</li> <li>fix: Address a bug or resolve an issue.</li> <li>chore: Perform routine tasks or maintenance.</li> <li>docs: Make changes to documentation.</li> <li>style: Implement code style changes (e.g., formatting).</li> <li>test: Modify or add tests.</li> <li>refactor: Implement code refactoring.</li> <li>perf: Performance Improvements.</li> <li>build: Any changes in build conditions.</li> <li>ci: Implement any continuous integration changes.</li> <li>revert: Revert to previous code state.</li> </ul> </li> </ul> <p>For example:</p> <pre><code>git add path/to/my/file\ngit commit -m \"feat: A brief description of this new feature which resolves #42\" --signoff\ngit commit -m \"fix: A brief description of this bug fix which fixes #42\" --signoff\ngit commit -m \"chore: A brief description of routine tasks or maintenance\" --signoff\ngit commit -m \"docs: A brief description of documentation changes\" --signoff\ngit commit -m \"style: A brief description of code style changes (e.g., formatting)\" --signoff\ngit commit -m \"test: A brief description of changes related to testing\" --signoff\ngit commit -m \"refactor: A brief description of code refactoring\" --signoff\ngit commit -m \"perf: A brief description of performance improvements\" --signoff\ngit commit -m \"build: A brief description of build conditions\" --signoff\ngit commit -m \"ci: A brief description of continuous integration changes\" --signoff\ngit commit -m \"revert: A brief description of revert previous code state\" --signoff\n</code></pre> <ul> <li>Pull the latest LPVS code from upstream into your branch.</li> </ul> <pre><code>git rebase upstream/main\n</code></pre> <ul> <li>Push your code to your forked repository.</li> </ul> <pre><code>git push -u origin my-feature\n</code></pre> <p>Note</p> <p><code>-u</code> parameter ensures that your branch will now automatically push and pull from the GitHub branch. That means if you type <code>git push</code> next time, it will know where to push to.</p> <ul> <li>Open a pull request against the upstream repository. Go to your repository on GitHub and click <code>Pull Request</code>.  Choose your branch on the right and enter some more details in the comment box. To link the pull request  to the issue, include <code>#999</code> in the pull request comment, where 999 is the issue number.</li> </ul> <p>Info</p> <p>Each pull-request should fix a single change.</p> <ul> <li> <p>Someone from the LPVS team will review your code, and you might be asked to make some changes. If requested,  make the necessary changes and push them to your branch. The pull request will be updated automatically.</p> </li> <li> <p>Once your code is accepted, it will be merged into the main branch and become part of the next LPVS release.  If your code is not accepted, don't be discouraged. LPVS aims to meet specific requirements and priorities,  and your contribution will still be available on GitHub as a reference for others.</p> </li> <li> <p>After your contribution is merged or declined, you can delete the branch you've worked on from your local  repository and your forked repository:</p> </li> </ul> <pre><code>git checkout main\ngit branch -D my-feature\ngit push origin --delete my-feature\n</code></pre>"},{"location":"dev-guide/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Everyone interacting in the LPVS project's codebases and issue trackers is expected to follow the Code of Conduct.</p>"},{"location":"dev-guide/integration/","title":"Integration guide","text":"<p>Use of LPVS JAR in your project</p>"},{"location":"dev-guide/integration/#authenticating-with-a-personal-access-token","title":"Authenticating with a personal access token","text":"<p>You can authenticate to GitHub Packages with Apache Maven by editing your <code>~/.m2/settings.xml</code> file to include your personal access token.</p> <p>Info</p> <p>Create a token with minimally sufficient rights:</p> <ul> <li> <p>Fine-grained tokens (recommended)     Only select repositories -&gt; Permissions -&gt; Repository permissions -&gt; Metadata -&gt; Read-only</p> </li> <li> <p>Tokens (classic)     Select scopes -&gt; read:packages_</p> </li> </ul> <p>Create a new <code>~/.m2/settings.xml</code> file if one doesn't exist.</p> <p>Example <code>settings.xml</code>:</p> <pre><code>&lt;settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n                      http://maven.apache.org/xsd/settings-1.0.0.xsd\"&gt;\n\n  &lt;activeProfiles&gt;\n    &lt;activeProfile&gt;github&lt;/activeProfile&gt;\n  &lt;/activeProfiles&gt;\n\n  &lt;profiles&gt;\n    &lt;profile&gt;\n      &lt;id&gt;github&lt;/id&gt;\n      &lt;repositories&gt;\n         &lt;repository&gt;\n          &lt;id&gt;github&lt;/id&gt;\n          &lt;url&gt;https://maven.pkg.github.com/samsung/lpvs&lt;/url&gt;\n          &lt;snapshots&gt;\n            &lt;enabled&gt;true&lt;/enabled&gt;\n          &lt;/snapshots&gt;\n        &lt;/repository&gt;\n      &lt;/repositories&gt;\n    &lt;/profile&gt;\n  &lt;/profiles&gt;\n\n  &lt;servers&gt;\n    &lt;server&gt;\n      &lt;id&gt;github&lt;/id&gt;\n      &lt;username&gt;USERNAME&lt;/username&gt;\n      &lt;password&gt;TOKEN&lt;/password&gt;\n    &lt;/server&gt;\n  &lt;/servers&gt;\n&lt;/settings&gt;\n</code></pre> <p>Note</p> <p>If your <code>settings.xml</code> file is not located in <code>~/.m2/settings.xml</code>, then you need to add the <code>-s path/to/file/settings.xml</code> option to <code>mvn</code> command</p>"},{"location":"dev-guide/integration/#installing-a-package","title":"Installing a package","text":"<p>Edit the <code>&lt;dependencies&gt;</code> element of the <code>pom.xml</code> file located in your project directory.</p> <pre><code>&lt;dependencies&gt;\n    &lt;dependency&gt;\n        &lt;groupId&gt;com.lpvs&lt;/groupId&gt;\n        &lt;artifactId&gt;lpvs&lt;/artifactId&gt;\n        &lt;version&gt;x.y.z&lt;/version&gt;\n    &lt;/dependency&gt;\n&lt;/dependencies&gt;\n</code></pre>"},{"location":"dev-guide/integration/#faq","title":"FAQ","text":"<p>Frequently asked questions and useful information.</p>"},{"location":"dev-guide/integration/#useful-utilities","title":"Useful utilities","text":""},{"location":"dev-guide/integration/#swagger","title":"Swagger","text":"<ul> <li>Swagger</li> <li>Swagger Editor</li> </ul>"},{"location":"dev-guide/integration/#plantuml","title":"PlantUML","text":"<ul> <li>PlantUML Language Reference Guide</li> <li>PlantText - Online Editor</li> </ul>"},{"location":"dev-guide/integration/#how-to-sign-a-release-using-gpg","title":"How to sign a release using GPG?","text":"<p>A good example of a release signature can be found on the link. However, 5 and 6 items are described separately.</p>"},{"location":"dev-guide/integration/#creating-a-key-pair","title":"Creating a key pair","text":"<pre><code>gpg --full-generate-key\n</code></pre> <p>During the execution of this command, you will need to enter additional data:</p> <ul> <li>Please select what kind of key you want: 1</li> <li>What keysize do you want? (3072): 4096</li> <li>Please specify how long the key should be valid: 0</li> <li>Key is valid for? (0): 0</li> <li>Is this correct? (y/N): y</li> <li>Real name: LPVS</li> <li>Email address: john.doe@example.com</li> <li>Comment: Keys for LPVS</li> </ul> <p>In this case, the result will be the next</p> <pre><code>gpg (GnuPG) 2.2.4; Copyright (C) 2017 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (3072) 4096\nRequested keysize is 4096 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0) 0\nKey does not expire at all\nIs this correct? (y/N) y\n\nGnuPG needs to construct a user ID to identify your key.\n\nReal name: LPVS\nEmail address: john.doe@example.com\nComment: Keys for LPVS\nYou selected this USER-ID:\n    \"LPVS (Keys for LPVS) &lt;john.doe@example.com&gt;\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\ngpg: key BE13B1D440E813F0 marked as ultimately trusted\ngpg: revocation certificate stored as '/home/virtual-pc/.gnupg/openpgp-revocs.d/D3C7C06AC34BDA9A41388E76BE13B1D440E813F0.rev'\npublic and secret key created and signed.\n\npub   rsa4096 2021-10-15 [SC]\n      D3C7C06AC34BDA9A41388E76BE13B1D440E813F0\nuid                      LPVS (Keys for LPVS) &lt;john.doe@example.com&gt;\nsub   rsa4096 2021-10-15 [E]\n</code></pre>"},{"location":"dev-guide/integration/#create-and-sign-a-tag-with-your-created-key","title":"Create and sign a tag with your created key","text":"<p>Set your GPG signing key in Git</p> <pre><code>git config --global user.signingkey &lt;key-ID&gt;\n</code></pre> <p>Create and sign the tag</p> <pre><code>git tag -s &lt;tag&gt;\n</code></pre>"},{"location":"dev-guide/integration/#sign-the-release-tarball-with-your-created-key","title":"Sign the release tarball with your created key","text":"<pre><code>gpg --armor --detach-sign lpvs-vx.x.x.tar.gz\n</code></pre> <p>Note</p> <p>If you have multiple keys, you must specify the key that will be used by adding the option <code>-u &lt;key-ID&gt;</code></p>"},{"location":"dev-guide/integration/#extraction-a-copy-of-a-key-pair-from-local-gpg-keyring","title":"Extraction a copy of a key pair from local gpg keyring","text":"<pre><code>gpg --output lpvs-public.pgp --armor --export john.doe@example.com\ngpg --output lpvs-private.pgp --armor --export-secret-key john.doe@example.com\n</code></pre> <p>Note</p> <p>Only the signature file (<code>lpvs-vx.x.x.tar.gz.asc</code>) and the public key (<code>lpvs-public.pgp</code>) must be loaded as an artifact to release.</p>"},{"location":"dev-guide/integration/#to-sign-the-release-using-another-computer","title":"To sign the release using another computer","text":"<p>For this need to download the private key (<code>lpvs-private.pgp</code>) by the next command:</p> <pre><code>gpg --import lpvs-private.pgp\n</code></pre>"},{"location":"dev-guide/integration/#how-to-use-gpg-to-verify-signed-release","title":"How to use GPG to verify signed release?","text":"<p>To perform the verification, you need the following:</p> <ul> <li>signed file \u2013 for example <code>lpvs-vx.x.x.tar.gz</code></li> <li>signature file \u2013 accompanying file with \u201c.asc\u201d extension (Ex. <code>lpvs-vx.x.x.tar.gz.asc</code>)</li> <li>public key \u2013 for example <code>lpvs-public.pgp</code></li> </ul>"},{"location":"dev-guide/integration/#import-the-public-key-to-your-keystore","title":"Import the public key to your keystore","text":"<pre><code>gpg --import &lt;public key&gt;\n</code></pre>"},{"location":"dev-guide/integration/#verification-signed-file","title":"Verification signed file","text":"<pre><code>gpg --verify &lt;signature file&gt; &lt;signed file&gt;\n</code></pre> <p>Note</p> <p>If you have multiple keys, you must specify the key that will be used by adding the option <code>-u &lt;key-ID&gt;</code></p>"},{"location":"dev-guide/integration/#dco-via-the-command-line","title":"DCO via the command line","text":"<p>The most popular way to do DCO is to sign off your username and email address in the git command line.</p> <p>First, configure your local git install.</p> <pre><code>$ git config --global user.name \"John Doe\"\n$ git config --global user.email johndoe@example.com\n</code></pre> <p>Obviously, you should use your own name and the email address associated with your GitHub user account.</p> <p>Now, every time you commit new code in git, just add a signoff statement via the <code>-s</code> flag.</p> <pre><code>$ git commit -s -m \"This is my commit message\"\n</code></pre> <p>That\u2019s it. Git adds your sign-off message in the commit message, and you contribution (commit) is now DCO compliant.</p>"},{"location":"dev-guide/integration/#how-to-generate-python-requirements-file-with-hashes","title":"How to generate Python requirements file with hashes?","text":"<p>To generate a Python requirements.txt file with hashes, which ensures that the same versions of packages are installed across different environments, you can use the <code>pip-compile</code> tool from the <code>pip-tools</code> package. Here's a step-by-step guide on how to achieve this:</p>"},{"location":"dev-guide/integration/#steps","title":"Steps:","text":"<ol> <li> <p>Install pip-tools:    First install pip-tools to manage you requirements.txt and add hashes.    <pre><code>pip install pip-tools\n</code></pre></p> </li> <li> <p>Create requirements.in file:    Add your packages to a requirements.txt file. This file will be used as input to generate the final requirements.txt file with hashes.    In case you need to use exact version of a package you can specify it in this file.    Example requirements.in:    <pre><code>mkdocs==1.6.1\npymdown-extensions==10.9\n</code></pre></p> </li> <li> <p>Compile the requirements.txt with hashes:    Use pip-compile with <code>--generate-hashes</code> flag to create a requirements.txt file includes secure hashes.    <pre><code>$ pip-compile --generate-hashes\n</code></pre></p> </li> </ol> <p>Note</p> <p>If you want to use custom names of input and output requirements file, specify them in command line like this:</p> <pre><code>pip-compile --output-file=custom-requirements.txt --generate-hashes custom-requirements.in\n</code></pre> <ul> <li>Without <code>--output-file</code>: It will always create requirements.txt file.</li> <li>With <code>--output-file</code>: It will specify any custom output file name.</li> </ul> <ol> <li>Result:    It will generate a requirements.txt (or custom-requirements.txt) file with hashes for each package, ensuring the integrity and security of the installed packages.    Example output in requirements.txt:    <pre><code>mkdocs==1.6.1 \\\n    --hash=sha256:... \\\n    --hash=sha256:...\n...\npymdown-extensions==10.9 \\\n    --hash=sha256:... \\\n    --hash=sha256:...\n...\n</code></pre></li> </ol>"},{"location":"dev-guide/testing_policy/","title":"Testing policy","text":"<p>How to check verify correct work of LPVS.</p>"},{"location":"dev-guide/testing_policy/#introduction","title":"Introduction","text":"<p>Testing is a very important part of LPVS project and our team values it highly.</p> <p>When adding or changing functionality, the main requirement is to include new tests as part of your contribution.</p> <p>Note</p> <p>If your contribution does not have the required tests, please mark this in the PR and our team will support  to develop them.</p> <p>The LPVS team strives to maintain test coverage of at least 70%. We ask you to help us keep this minimum.  Additional tests are very welcome.</p> <p>The LPVS team strongly recommends adhering to the Test-driven development (TDD) as a software development  process.</p>"},{"location":"dev-guide/testing_policy/#how-to-start-test-suite-local","title":"How to start Test Suite (Local)","text":"<p>To build and testing all packages:</p> <pre><code>mvn -B package -Pcoverage --file pom.xml\n</code></pre> <p>To start testing all packages:</p> <pre><code>mvn test\n</code></pre>"},{"location":"dev-guide/testing_policy/#automated-run-test-suite-remote","title":"Automated Run Test Suite (Remote)","text":"<p>Code testing occurs remotely using an Actions -&gt; Workflow Test-suite  during each <code>push</code> or <code>pull_request</code>.</p> <p>Info</p> <p>Find more information on GitHub Actions documentation </p>"},{"location":"user-guide/","title":"User Guide","text":"<p>How to configure and run LPVS.</p> <p>The LPVS User Guide provides documentation for users on how to configure and run LPVS. You can jump directly to the pages listed below, or use the next and previous buttons in the navigation bar at the top of the page to move through the documentation in order.</p> <p>There are 2 modes of LPVS operation: - Service mode - LPVS works as a service that is started by the system and runs continuously. - Command line mode - LPVS is executed from the command line and runs until it completes its task.</p>"},{"location":"user-guide/#service-mode","title":"Service mode","text":"<ul> <li>GitHub webhook configuration</li> <li>Run service using pre-built Docker image</li> <li>Scanner installation</li> <li>Database configuration</li> <li>Build and run service from the source code</li> </ul>"},{"location":"user-guide/#command-line-mode","title":"Command line mode","text":"<ul> <li>Single scan of the pull request</li> <li>Single scan of local files</li> </ul>"},{"location":"user-guide/#configuration","title":"Configuration","text":"<ul> <li>Configuration options</li> <li>Database customization</li> </ul>"},{"location":"user-guide/cli/cli_file/","title":"Single scan of local files","text":"<p>One-time scan on a specific local files from the command line.</p> <p>You can perform a one-time scan on a specific local file or folder using the single scan mode. LPVS should be compiled from the source code. Please refer to the detailed guideline.</p> <p>Follow the next steps:</p> <ul> <li> <p>Make sure that the ScanOSS scanner is installed. If not, please follow    the installation guide.</p> </li> <li> <p>Fill in all required properties in the profile file. Please refer to   the profile configuration guide.</p> </li> <li> <p>Build and install LPVS, navigate to the target directory. For more details,   please refer to the build instructions.</p> </li> </ul> <pre><code>mvn clean install\ncd target/\n</code></pre> <ul> <li>Choose a specific local file or folder which is a target for the scan and run the command with flag <code>--local.path</code>:</li> </ul> <pre><code>java -jar lpvs-*.jar --local.path=&lt;/path/to/file/or/folder&gt;\n</code></pre> <p>Example:</p> <pre><code>-jar lpvs-*.jar --local.path=test.java\n</code></pre> <p>Note</p> <p>By default, the above commands require a pre-configured MySQL database.  Use the \"singlescan\" profile to skip setting up a pre-configured MySQL database:</p> <pre><code>java -jar -Dspring.profiles.active=singlescan lpvs-*.jar --local.path=&lt;/path/to/file/or/folder&gt;\n</code></pre> <ul> <li>Optionally, generate an HTML report and save it in a specified folder using flag <code>--build.html.report</code>.   Replace <code>path/to/your/folder</code> with the full path to the folder where you want to save the HTML report,   and <code>your_report_filename.html</code> with the desired filename for the report.</li> </ul> <pre><code>java -jar -Dspring.profiles.active=singlescan lpvs-*.jar --local.path=&lt;/path/to/file/or/folder&gt; --build.html.report=&lt;your_report_filename.html&gt;\n</code></pre> <p>Warning</p> <p>Ensure that the specified folder exists before generating the HTML report.</p> <p>Examples of the command:</p> <pre><code>java -jar -Dspring.profiles.active=singlescan lpvs-*.jar --local.path=test.c\njava -jar -Dspring.profiles.active=singlescan lpvs-*.jar --local.path=test_folder --build.html.report=test/report.html\n</code></pre>"},{"location":"user-guide/cli/cli_pr/","title":"Single scan of the pull request","text":"<p>One-time scan on a specific pull request from the command line.</p> <p>You can perform a one-time scan on a specific pull request using the single scan mode.  LPVS should be compiled from the source code. Please refer to the detailed guideline.</p> <p>Follow the next steps:</p> <ul> <li> <p>Make sure that the ScanOSS scanner is installed. If not, please follow   the installation guide.</p> </li> <li> <p>Fill in all required properties in the profile file. Please refer to   the profile configuration guide.</p> </li> <li> <p>Build and install LPVS, navigate to the target directory. For more details,   please refer to the build instructions.</p> </li> </ul> <pre><code>mvn clean install\ncd target/\n</code></pre> <ul> <li>Choose a specific pull request from GitHub which is a target for the scan and run the command with flag <code>--github.pull.request</code>:</li> </ul> <pre><code>java -jar -Dgithub.token=&lt;my-token&gt; lpvs-*.jar --github.pull.request=&lt;PR URL&gt;\n</code></pre> <p>Example: </p> <pre><code>-jar -Dgithub.token=your_personal_token lpvs-*.jar --github.pull.request=https://github.com/Samsung/LPVS/pull/594\n</code></pre> <p>Note</p> <p>By default, the above commands require a pre-configured MySQL database.  Use the \"singlescan\" profile to skip setting up a pre-configured MySQL database:</p> <pre><code>java -jar -Dspring.profiles.active=singlescan -Dgithub.token=&lt;my-token&gt; lpvs-*.jar --github.pull.request=&lt;PR URL&gt;\n</code></pre> <ul> <li>Optionally, generate an HTML report and save it in a specified folder using flag <code>--build.html.report</code>.  Replace <code>path/to/your/folder</code> with the full path to the folder where you want to save the HTML report,  and <code>your_report_filename.html</code> with the desired filename for the report.</li> </ul> <pre><code>java -jar -Dspring.profiles.active=singlescan -Dgithub.token=&lt;my-token&gt; lpvs-*.jar --github.pull.request=&lt;PR URL&gt; --build.html.report=&lt;/path/to/your/folder/your_report_filename.html&gt;\n</code></pre> <p>Warning</p> <p>Ensure that the specified folder exists before generating the HTML report.</p> <p>Examples of the command:</p> <pre><code>java -jar -Dspring.profiles.active=singlescan lpvs-*.jar --github.pull.request=https://github.com/Samsung/LPVS/pull/2\njava -jar -Dspring.profiles.active=singlescan lpvs-*.jar --github.pull.request=https://github.com/Samsung/LPVS/pull/2 --build.html.report=report.html\n</code></pre>"},{"location":"user-guide/config/database/","title":"Database customization","text":"<p>Customization of the database with licenses and license conflicts.</p> <p>The LPVS database consists of several tables. You have to pay attention to two tables: <code>lpvs_license_list</code>  and <code>lpvs_license_conflicts</code>. These tables are used to store information about licenses and their conflicts  respectively. Here's a brief description of each table.</p>"},{"location":"user-guide/config/database/#table-lpvs_license_list","title":"Table <code>lpvs_license_list</code>","text":"<p>This table stores license information.</p> <pre><code>CREATE TABLE IF NOT EXISTS lpvs_license_list (\n    id bigint NOT NULL AUTO_INCREMENT,\n    license_usage varchar(255) DEFAULT NULL,\n    license_name varchar(255) NOT NULL,\n    license_spdx varchar(255) NOT NULL,\n    license_alternative_names longtext DEFAULT NULL,\n    PRIMARY KEY (id),\n    UNIQUE (license_spdx)\n);\n</code></pre> <p>The meanings of each field are as follows: - <code>id</code>: Unique identifier which auto increments. - <code>license_usage</code>: Indicates the possibility to use the license in your code and could be <code>PERMITTED</code>, <code>RESTRICTED</code>, <code>PROHIBITED</code>, or <code>UNREVIEWED</code>. - <code>license_name</code>: Name of the license. - <code>license_spdx</code>: SPDX identifier of the license. - <code>license_alternative_names</code>: Alternative names of the license.</p>"},{"location":"user-guide/config/database/#table-lpvs_license_conflicts","title":"Table <code>lpvs_license_conflicts</code>","text":"<p>This table stores license conflicts information. </p> <pre><code>CREATE TABLE IF NOT EXISTS lpvs_license_conflicts (\n    id bigint NOT NULL AUTO_INCREMENT,\n    conflict_license_id bigint NOT NULL,\n    repository_license_id bigint NOT NULL,\n    PRIMARY KEY (id),\n    KEY (conflict_license_id),\n    KEY (repository_license_id),\n    FOREIGN KEY (conflict_license_id) REFERENCES lpvs_license_list (id),\n    FOREIGN KEY (repository_license_id) REFERENCES lpvs_license_list (id)\n);\n</code></pre> <p>The meanings of each field are as follows: - <code>id</code>: Unique identifier which auto increments. - <code>conflict_license_id</code>: ID of the conflicting license. - <code>repository_license_id</code>: License ID of the repository.</p> <p>Warning</p> <p>Both tables <code>lpvs_license_list</code> and <code>lpvs_license_conflicts</code> should be filled by the user manually. </p> <p>When a new license is detected by LPVS, it will be added to the table <code>lpvs_license_list</code> with  <code>license_usage</code> status set to <code>UNREVIEWED</code>, indicating that it has not been reviewed yet.</p> <p>Info</p> <p>Sample MySQL dump file is located in the repository  and can be used as a reference.</p>"},{"location":"user-guide/config/options/","title":"Configuration options","text":"<p>Description of the meaningful properties and its possible values.</p>"},{"location":"user-guide/config/options/#properties-in-the-application-profile-files","title":"Properties in the application profile files","text":"<p>There are three profiles available in the LPVS application:</p> <ul> <li><code>application.properties</code>: default profile which contains all main properties of the application</li> <li><code>application-singlescan.properties</code>: profile for single scan mode</li> <li><code>application-web.properties</code>: profile for connecting the frontend application to the backend</li> </ul>"},{"location":"user-guide/config/options/#applicationproperties-profile","title":"<code>application.properties</code> profile","text":"<ul> <li> <p><code>debug</code>: This setting determines whether the application runs in debug mode. If set to false,  the application will run in normal execution mode. Default: <code>false</code>.</p> </li> <li> <p><code>server.port</code>: This setting specifies the port number used by the application. Default: <code>7896</code>.</p> </li> <li> <p><code>scanner</code>: This setting specifies the name of the scanning tool being used. Currently supporting  ScanOSS. Default: <code>scanoss</code>.</p> </li> <li> <p><code>license_conflict</code>: This setting specifies where the license conflict information comes from.  It can be either <code>db</code> (from the manually filled table in database, refer to the  Database guide) or <code>scanner</code> (if supported by scanner). Default: <code>db</code>.</p> </li> <li> <p><code>license_source</code>: This setting specifies the URL of the external OSORI  license database. Default: <code>https://olis.or.kr:8082</code>.</p> </li> <li> <p><code>spring.profiles.active</code>: This setting specifies which Spring profile is active.</p> </li> <li> <p><code>github.*</code>: These settings include various configurations related to GitHub such as login, token, API URL. Fill in your own values for these settings. Please refer to the Personal token creation guide for more details.</p> </li> <li> <p><code>github.secret</code>: This setting specifies the secret string used for configuring webhooks. Please refer to the Webhook configuration guide  for more details. Default: <code>LPVS</code>.</p> </li> <li> <p><code>lpvs.*</code>: These settings include various configurations specific to the LPVS application like core pool size,  number of scan attempts, and version.</p> </li> <li> <p><code>spring.jpa.properties.hibernate.default_schema</code>: This setting specifies the default schema name that Hibernate  should use. Default: <code>lpvs</code>.</p> </li> <li> <p><code>spring.datasource.*</code>: These settings specify the data source configurations including URL, username, password, etc. Fill in your own values for these settings.</p> </li> </ul>"},{"location":"user-guide/config/options/#application-singlescanproperties-profile","title":"<code>application-singlescan.properties</code> profile","text":"<ul> <li> <p><code>spring.sql.init.data-locations</code>: This setting specifies the location of the SQL script files that will  be executed when initializing the database. By default, it is set to <code>classpath*:database_dump.sql</code>, indicating  that the default dump file named <code>database_dump.sql</code> should be found in any package within the classpath.</p> </li> <li> <p><code>spring.datasource.username</code>: This setting specifies the username for accessing the datasource. By default,  it is left blank, indicating that no username is required for authentication.</p> </li> <li> <p><code>spring.datasource.password</code>: This setting specifies the password for accessing the datasource. Again,  it is left blank here, indicating that no password is needed for authentication.</p> </li> </ul>"},{"location":"user-guide/config/options/#application-webproperties-profile","title":"<code>application-web.properties</code> profile","text":"<p>These properties configure OAuth2 clients for different providers such as Google, Naver, and Kakao.  For each provider, client ID, client secret, redirect URI, authorization grant type, scope, and other  relevant details should be specified. Additionally, there are frontend configuration options for  specifying the main page URL and allowed origins for CORS. Overall, these properties enable  integration with multiple authentication providers and provide flexibility in handling user authentication.</p> <p>Warning</p> <p>All properties in <code>application-web.properties</code> profile must be filled in case of connecting some  frontend application. If you don't need to connect any frontend application, you can ignore this file.</p> <p>Info</p> <p>Sample frontend application is available at LPVS repository and can be used as a reference.</p>"},{"location":"user-guide/config/options/#command-line-options","title":"Command line options","text":"<p>All missing properties from application profiles can be specified via command line options.  For example:</p> <pre><code>java -jar -Dgithub.token=&lt;my-token&gt; -Dgithub.secret=&lt;my-secret&gt; lpvs-*.jar\n</code></pre> <p>But there are several options that are not supported by this method and only must be set for the one-time scans in command line mode.</p> <p>The following command line options are available:</p> <ul> <li> <p><code>--build.html.report</code>: This setting specifies the path to the HTML report file which will be generated after the scan. If it is not specified, no HTML report will be generated and result of the scan will be displayed in the console.</p> </li> <li> <p><code>--github.pull.request</code>: This setting specifies the pull request URL which should be scanned by the LPVS application.</p> </li> <li> <p><code>--local.path</code>: This setting specifies the path to the local file or folder which should be scanned by the LPVS application.</p> </li> </ul> <p>Warning</p> <p>Options <code>--github.pull.request</code> and <code>--local.path</code> can't be use simultaneously. If both options are specified, LPVS application will throw an exception and exit with error code.</p>"},{"location":"user-guide/config/options/#environment-variables","title":"Environment variables","text":"<p>Alternatively, you can provide the necessary values for several properties using the following environment variables: </p> <ul> <li><code>LPVS_GITHUB_LOGIN</code>: Equivalent to the property <code>github.login</code>.</li> <li><code>LPVS_GITHUB_TOKEN</code>: Equivalent to the property <code>github.token</code>.</li> <li><code>LPVS_GITHUB_API_URL</code>: Equivalent to the property <code>github.api.url</code>.</li> <li><code>LPVS_GITHUB_SECRET</code>: Equivalent to the property <code>github.secret</code>.</li> <li><code>LPVS_LICENSE_CONFLICT</code>: Equivalent to the property <code>license_conflict</code>.</li> </ul>"},{"location":"user-guide/service/build-and-run/","title":"Build and run service from the source code","text":"<p>Basic steps to build and run LPVS.</p> <p>To build and run the LPVS application you have to follow the next steps:</p> <ul> <li>Fill in the properties file according to the selected profile with your own data. Refer to the guideline.</li> </ul> <p>Note</p> <p>Alternatively, you can provide the necessary values using the environment variables, or using command line options.</p> <ul> <li>Build the LPVS application using Maven.</li> </ul> <pre><code>mvn clean install\n</code></pre> <ul> <li>Navigate to the target directory.</li> </ul> <pre><code>cd target/\n</code></pre> <ul> <li>Run the LPVS service using the following command:</li> </ul> <pre><code>java -jar lpvs-*.jar\n</code></pre> <p>LPVS is now built and running. You can create a new pull request or update an existing one with commits,  and LPVS will automatically start scanning and provide comments about the licenses found in the project.</p> <p>Warning</p> <p>Make sure that you configured GitHub webhooks according to the guideline.</p>"},{"location":"user-guide/service/database/","title":"Database configuration","text":"<p>How to install and configure the LPVS database.</p>"},{"location":"user-guide/service/database/#installation","title":"Installation","text":"<p>Install MySQL server locally using the command:</p> <pre><code>sudo apt install mysql-server\n</code></pre>"},{"location":"user-guide/service/database/#configuration","title":"Configuration","text":"<ul> <li>Start the MySQL server:</li> </ul> <pre><code>sudo service mysql start\n</code></pre> <ul> <li>Open the MySQL command line interface:</li> </ul> <pre><code>sudo mysql\n</code></pre> <ul> <li>Run the following commands in the MySQL command line interface to create the necessary database and user:</li> </ul> <pre><code>mysql&gt; create database lpvs;\nmysql&gt; create user username;\nmysql&gt; grant all on lpvs.* to username;\nmysql&gt; alter user username identified by 'password';\nmysql&gt; exit;\n</code></pre> <ul> <li>(Optional) If you have an existing dump file, import it into the newly created database using the command:</li> </ul> <pre><code>mysql -u[username] -p[password] &lt; /path/to/dump/file/database_dump.sql\n</code></pre> <ul> <li> <p>(Optional) Fill in the <code>lpvs_license_list</code> and <code>lpvs_license_conflicts</code> tables according to the Database customization guideline.</p> </li> <li> <p>Update the properties related to the database operation in the profile file according to the guideline.</p> </li> </ul>"},{"location":"user-guide/service/docker/","title":"Run service using pre-built Docker image","text":"<p>How to download and run pre-built LPVS Docker images without building the LPVS project.</p>"},{"location":"user-guide/service/docker/#setting-up-lpvs-docker-environment-variables","title":"Setting up LPVS Docker environment variables","text":"<p>For the Docker deployment scenario, you may need to fill in the environment variables  in the <code>docker-compose.yml</code> file.</p> <ul> <li> <p>Open <code>docker-compose.yml</code> file.</p> </li> <li> <p>In the <code>environment</code> part of the <code>lpvs</code> service, find <code>## Github data for fetching code</code>  and fill in the GitHub <code>login</code> and personal <code>token</code> that was generated earlier.</p> <pre><code>- github.login=&lt;github-login&gt;\n- github.token=&lt;personal-token&gt;\n</code></pre> </li> <li> <p>In case you plan to use a database user other than <code>root</code> reflect this in the appropriate  lines in the <code>## Database Configuration</code> part of the <code>lpvs</code> service in <code>environment</code> section.</p> <pre><code>- spring.datasource.username=user\n- spring.datasource.password=password  \n</code></pre> </li> <li> <p>Make the following changes in the <code>environment</code> section of <code>mysqldb</code> service near  <code>MYSQL_ROOT_PASSWORD</code> value:</p> <pre><code>- MYSQL_USER: user\n- MYSQL_PASSWORD: password\n</code></pre> </li> </ul> <p>Note</p> <p>If you are using only the <code>root</code> user, make the following change:</p> <pre><code>- spring.datasource.username=root\n- spring.datasource.password=rootpassword\n...\n- MYSQL_ROOT_PASSWORD: rootpassword\n</code></pre> <p>Warning</p> <p>In both cases, ensure that the <code>MYSQL_ROOT_PASSWORD</code> field is filled.</p> <ul> <li> <p>You can also change the directory for storing MySQL data by modifying the following line:</p> <pre><code>- ./mysql-lpvs-data:/var/lib/mysql\n</code></pre> </li> </ul> <p>Info</p> <p>Database storage by default is a directory in the root of the repository with    the name <code>mysql-lpvs-data</code>.</p>"},{"location":"user-guide/service/docker/#running-and-stopping-lpvs-and-mysql-docker-images","title":"Running and stopping LPVS and MySQL Docker images","text":"<p>Start the LPVS services using <code>docker compose</code>:</p> <pre><code>docker compose up -d\n</code></pre> <p>Stop the LPVS services using <code>docker compose</code>:</p> <pre><code>docker compose down\n</code></pre> <p>You can now create a new pull request or update an existing one with commits.  If webhook was configured correctly, LPVS will automatically start scanning and  provide comments about the licenses and conflicts found in the project.</p>"},{"location":"user-guide/service/scanner/","title":"Scanner installation","text":"<p>How to install scan engine ScanOSS.</p> <p>The ScanOSS Python package provides a simple easy to consume library for interacting with ScanOSS APIs/Engine.</p> <p>To install ScanOSS and dependencies, use the command:</p> <pre><code>pip3 install --require-hashes -r requirements.txt\n</code></pre> <p>Info</p> <p>File <code>requirements.txt</code> could be found at the root folder  of the LPVS repository.</p> <p>Make sure that the <code>PATH</code> variable is added to the environment:</p> <pre><code>export PATH=\"$HOME/.local/bin:$PATH\"\n</code></pre> <p>For more details, please refer to the official guideline.</p> <p>Warning</p> <p>If installing on Ubuntu 2023.04, Fedora 38, Debian 11, etc. a few additional steps are required before  installing ScanOSS. More details can be found here.</p>"},{"location":"user-guide/service/webhook/","title":"GitHub webhook configuration","text":"<p>How to configure GitHub project for interaction with LPVS.</p> <p>To enable LPVS license scanning for your project, you need to set up GitHub Webhooks:</p>"},{"location":"user-guide/service/webhook/#create-a-personal-github-access-token","title":"Create a personal GitHub access token","text":"<p>Follow the instructions here  to create a personal access token (<code>personal-token</code>) with the necessary permissions.</p> <p>Note</p> <p>Pay attention that the token must be copied immediately after creation,  because you will not be able to see it later!</p>"},{"location":"user-guide/service/webhook/#configure-the-webhook-in-your-github-repository-settings","title":"Configure the webhook in your GitHub repository settings","text":"<p>Follow the next steps:</p> <ul> <li>Go to <code>Settings</code> -&gt; <code>Webhooks</code>.</li> </ul> <p></p> <ul> <li>Click on <code>Add webhook</code>.</li> </ul> <p></p> <ul> <li>Fill in the <code>Payload URL</code> with: <code>http://&lt;IP where LPVS is running&gt;:7896/webhooks</code>.</li> </ul> <p>Note</p> <p>If you're using ngrok, the <code>Payload URL</code> should be like <code>https://50be-62-205-136-206.ngrok-free.app/webhooks</code>.</p> <ul> <li> <p>Install ngrok and connect your account from here (follow steps 1 and 2).</p> </li> <li> <p>Run ngrok using the command: <code>ngrok http 7896</code>.</p> </li> </ul> <ul> <li>Specify the content type as <code>application/json</code>.</li> <li>Fill in the <code>Secret</code> field with the passphrase: <code>LPVS</code>.</li> <li>Save the same passphrase in <code>github.secret</code> of the LPVS backend <code>application.properties</code> or <code>docker-compose.yml</code> files.</li> </ul> <p></p> <ul> <li>Select <code>Let me select individual events</code> -&gt; <code>Pull requests</code> (make sure only <code>Pull requests</code> is selected).</li> <li>Set the webhook to <code>Active</code>.</li> <li>Click <code>Add Webhook</code>.</li> </ul> <p></p> <p>Configuration from your project side is now completed.</p>"}]}